================================================================================
Common Problem-Solving Strategies: (*)

- Brute Force:
  - List all possibilities to find the solution
  - The most straightforward way, when you have no idea, start with Brute Force, then think of how to optimize it

- Simulation (Intuitively Thinking):
  - Simulate how human solve the problem

- Recursion:
  - Solve a problem by solving sub-problems
  - f(n) = g(f(n - 1))
  - Using DP for optimization

- Divide & Conquer: (Merge-Sort)
  - Solve a big problem by solving small sub-problems and combine the results of small sub-problems
  - f(0, n) = g(f(0, m), f(m + 1, n))

- Search (Find solutions):
  - DFS(Stack)
  - BFS(Queue)
  - Backtracking
  - Binary Search (BS)

- Tree / Graph / Data Structure:
  - Proper data structure would be very helpful when solving some specific problems

- Space & Time trade-off: (Memorization)
  - We can use more space to store results from redundant computation to fasten the solution
  - e.g. HashTable, DP, Change tree node

Reference:
* https://www.geeksforgeeks.org/fundamentals-of-algorithms/
* https://leetcode.com/problems/reverse-pairs/discuss/97268/General-principles-behind-problems-similar-to-%22Reverse-Pairs%22

================================================================================
Common Optimization Strategies: (*)

- Run Time & Space complexity analysis, see what is the complexity of current solution
and how we are going to optimize it. (O(1) < O(logn) < O(n) < O(n * logn) < O(n ^ 2) < O(n ^ m))
- O(1) - Array, HashMap, HashSet access
- O(logn) - path length of a tree
- O(n) - Array traverse
- O(n * logn) - Merge Sort, Quick Sort
- O(n ^ 2) - Enumeration, double loops
- O(n ^ m) - Enumeration, multip layers of loops
- Space & Time trade-off: sometimes we can use more space to fasten the solution
(HashTable to remember result to avoid computing same values twice, DP)
- Pruning: skip unnecessary steps to improve the time performance
- Backtracking: Prunning used in recursion
- Sorting: solve some digit comparasion related problem would be easier if everythinkg
is already sorted
- Data Structure: proper data structure would be very helpful when solve some specific
problems

================================================================================
Common Optimization Strategies using Data Structure: (https://www.geeksforgeeks.org/data-structures/)

- Quick Lookup: HashTable, HashMap, HashSet
- Quick Access: Array, Linked List
- Search & Indexing: Tree, Balanced Tree, Binary Search Tree (BST)
- Priority & Sequence: Queue, Priority Queue (Heap), Stack
- String Search: Trie, KMP
- Numeric Value Search: BST (Binary Search Tree)
- Grouping & Classification: Union-Find (Disjoint Set)
- Range: Segment Tree
- Range Sum: Binary Indexed Tree (Fenwick Tree) (https://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/)
- Self-Balanced Tree: Red-black Tree, AVL Tree

================================================================================
Specific Problem-solving Strategies:

- Two Pointers: find min/max value when sequence matters, find if linked list has
cycle in it
- Search: DFS, BFS, Backtracking (https://en.wikipedia.org/wiki/Backtracking)
- Shortest path: BFS, Bidirectional BFS
- Selection: Quick Select (https://en.wikipedia.org/wiki/Quickselect)
- Bucket Sort: O(n) sorting
- Sweep Line: Rectangle, Matrix