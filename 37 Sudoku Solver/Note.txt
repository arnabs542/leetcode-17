============================================================================================
Thoughts:

The simplest solution would be to list all possible digits from 1 - 9 for each cell and
try all combinations until it fulfill the requirement. Once we detect current solution does
not work, immediately try the next solution. Thus, we can use backtracking method to solve
the problem, also combined with DFS. (recursion, dfs, backtracking)

But to reduce the search space, we can also try to limit the digits to only applicable not
just from 1 - 9. For example, if the row of the cell already have 1, 5, 7, we can limit to
2, 3, 4, 6, 8, 9, and if current column already has 2, 5, 8, 9, we can limit to 3, 4, 6. By
doing this, we can reduce the search space to optimize the search efficiency.

Reference:
- https://www.cnblogs.com/ganganloveu/p/3828401.html
- https://blog.csdn.net/feliciafay/article/details/44558851
- https://zhengyang2015.gitbooks.io/lintcode/sudoku_solver_37_leetcode.html

============================================================================================
Algorithm complexity: 9 ^ m(? I am not sure)

m: number of empty cells to fill

============================================================================================
Time: (Thoughts + Coding)

============================================================================================
Question:

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'.


A sudoku puzzle...


...and its solution numbers marked in red.

Note:

The given board contain only digits 1-9 and the character '.'.
You may assume that the given Sudoku puzzle will have a single unique solution.
The given board size is always 9x9.