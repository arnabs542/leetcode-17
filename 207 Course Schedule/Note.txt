============================================================================================
Thoughts:

To tell if we could finish the course, we need to find if there is any circular dependency.
We could build a dependency relationship with a graph. If we find any circular tree inside
the graph. It is then impossible to finish the courses.

To make it faster, we could use a hash table to cache the result, save the reachable course
for each course, for each edge, we just need to update the reachable for all courses.

============================================================================================
Algorithm complexity:

m: number of edges
n: number of courses

O(m * n)

============================================================================================
Time: (Thoughts + Coding)

38m31s

============================================================================================
Question:

There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take.
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take.
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
]