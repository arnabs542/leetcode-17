============================================================================================
Thoughts:

Simplest way would be to merge two sorted arrays into one and get the middle one if it has odd
number of numbers otherwise, get the average of middle two numbers. However, the complexity
would be O(m + n).

As the requirement is O(log(m + n)), thus, it means that we need to use the Divide and Conquer
method. Such as binary search, so that we do not need to loop through each element, we can
divide the problem into two subproblems, and recursively solve the problem, eliminating impossible
elements. So that we can achieve the O(log(m + n)).

Back to this problem, say we have array a and b, we can first pick one median value of the
a, separate into two subarrays, a1 and a2. All elements in a1 < median, and a1 > median,
use binary search to separate b into two subarrays b1, b2 so that b1 < median, and b2 > median.
So that we have two group, {a1, b1} < median, {a2, b2} > median.
If (a1.length + b1.length) < (a.length + b.length), thus the result must be in the {a2, b2}.

Reference:
https://zhuanlan.zhihu.com/p/36288225
https://www.tianmaying.com/tutorial/LC4
https://www.jiuzhang.com/solution/median-of-two-sorted-arrays/

============================================================================================
Algorithm complexity:

O(log(m + n))

============================================================================================
Time: (Thoughts + Coding)

============================================================================================
Question:

There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5