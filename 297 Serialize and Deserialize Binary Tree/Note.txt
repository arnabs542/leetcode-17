============================================================================================
Thoughts:

The purpose of serialization and deserialization is to construct the instance at any time
just depending on static information like string. Thus, the string should keep all the informaiton
needed to construct a object.

The TreeNode object has the following information its value, left and right node. As left
and right node is a reference to other object. We could keep that feature as well. We could
use a separate string to store each node, and give a ID to that string to be referenced by
other nodes.

Thus, value will be part of the string, its own ID, and the ID of left and right nodes. We
could put all string in one string and separate by special symbol like comma.

To deserialize that, we can construct one instance for each separate string.

As tree is defined recursively, we can also try to run the algorith mrecursively.

============================================================================================
Algorithm complexity:

serialize: O(n)

deserialize: O(n * n)

n: number of nodes in the tree

============================================================================================
Time: (Thoughts + Coding)

45min24s

============================================================================================
Question:

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example:

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.